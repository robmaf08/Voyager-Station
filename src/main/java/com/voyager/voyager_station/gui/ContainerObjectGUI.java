package com.voyager.voyager_station.gui;

import com.voyager.voyager_station.type.AdvNPC;
import com.voyager.voyager_station.type.AdvObject;
import com.voyager.voyager_station.type.AdvObjectContainer;
import com.voyager.voyager_station.type.Inventory;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Roberto Maffucci
 */
public class ContainerObjectGUI extends javax.swing.JFrame {

    private GUI gui;

    private AdvNPC npc = null;

    private enum Type {
        CONTAINER,
        NPC_INVENTORY
    }

    Type type;

    /**
     * Creates new form ContainerObjectGUI
     */
    public ContainerObjectGUI() {
        initComponents();
    }

    public ContainerObjectGUI(GUI gui) {
        initComponents();
        this.gui = gui;
    }

    public void init(AdvObjectContainer container, Inventory inv) {
        DefaultListModel model = new DefaultListModel();
        listContenitore.setModel(model);
        if (!container.getList().isEmpty()) {
            for (AdvObject o : container.getList()) {
                model.addElement(o);
            }
        }
        if (!inv.getList().isEmpty()) {
            model = new DefaultListModel();
            listInventario.setModel(model);
            for (AdvObject o : inv.getList()) {
                model.addElement(o);
            }
        }
        type = Type.CONTAINER;
    }

    public void init(Inventory invNpc, AdvNPC npc, Inventory inv) {
        DefaultListModel model = new DefaultListModel();
        listContenitore.setModel(model);
        if (!invNpc.getList().isEmpty()) {
            for (AdvObject o : invNpc.getList()) {
                model.addElement(o);
            }
        }
        if (!inv.getList().isEmpty()) {
            model = new DefaultListModel();
            listInventario.setModel(model);
            for (AdvObject o : inv.getList()) {
                model.addElement(o);
            }
        }
        type = Type.NPC_INVENTORY;
        this.npc = npc;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listContenitore = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listInventario = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Oggetto contenitore");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 117, 117));

        listContenitore.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listContenitoreValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listContenitore);

        jLabel2.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(243, 236, 241));
        jLabel2.setText("Oggetti contenuti: ");

        jLabel1.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(246, 245, 245));
        jLabel1.setText("Descrizione oggetto:");

        jScrollPane2.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        jButton1.setText("Prendi oggetto");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(243, 236, 241));
        jLabel3.setText("Inventario:");

        jButton2.setText("Lascia oggetto");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        listInventario.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listInventarioValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listInventario);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(32, 32, 32))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 320));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void listContenitoreValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listContenitoreValueChanged
        if (!evt.getValueIsAdjusting()) {
            DefaultListModel model;
            model = (DefaultListModel) listContenitore.getModel();
            if (!model.isEmpty()) {
                if (listContenitore.getSelectedIndex() != -1) {
                    AdvObject o;
                    o = (AdvObject) model.getElementAt(listContenitore.getSelectedIndex());
                    jTextPane1.setText(o.getDescription());
                    listInventario.clearSelection();
                }
            }
        }
    }//GEN-LAST:event_listContenitoreValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultListModel model, newModel;
        model = (DefaultListModel) listContenitore.getModel();
        newModel = new DefaultListModel();
        if (!model.isEmpty() && listContenitore.getSelectedIndex() != -1) {
            AdvObject o = (AdvObject) model.getElementAt(listContenitore.getSelectedIndex());
            try {
                gui.getGame().getInventory().add(o);
                gui.getInventory().setItemsInvetory(o);
                for (int i = 0; i < model.getSize(); i++) {
                    if (!model.get(i).equals(o)) {
                        newModel.addElement(model.get(i));
                    }
                }
                listContenitore.setModel(newModel);
                DefaultListModel modelInventory;
                if (listInventario.getModel().getSize() >= 1) {
                    modelInventory = (DefaultListModel) listInventario.getModel();
                } else {
                    modelInventory = new DefaultListModel();
                }
                modelInventory.addElement(o);
                listInventario.setModel(modelInventory);

                if (type == Type.CONTAINER) {
                    for (AdvObject obj : gui.getGame().getCurrentRoom().getObjects()) {
                        if (obj instanceof AdvObjectContainer) {
                            ((AdvObjectContainer) obj).remove(o);
                        }
                    }
                } else if (type == Type.NPC_INVENTORY) {
                    for (AdvNPC n : gui.getGame().getCurrentRoom().getNPCs()) {
                        if (n.getInventory().getList().contains(o)) {
                            n.getInventory().remove(o);
                        }
                    }
                }
            } catch (NoSuchFieldException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Undo exception", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleziona prima un oggetto da mettere nell'inventario!", "Errore selezione oggetto", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultListModel model, newModel;
        model = (DefaultListModel) listInventario.getModel();
        if (!model.isEmpty() && listInventario.getSelectedIndex() != -1) {
            newModel = new DefaultListModel();
            AdvObject o = (AdvObject) model.getElementAt(listInventario.getSelectedIndex());
            try {
                gui.getInventory().removeItem(o);
                for (int i = 0; i < model.getSize(); i++) {
                    if (!model.get(i).equals(o)) {
                        newModel.addElement(model.get(i));
                    }
                }
                model.removeElement(o);
                listInventario.setModel(model);
                DefaultListModel modelContainer = (DefaultListModel) listContenitore.getModel();
                modelContainer.addElement(o);
                listContenitore.setModel(modelContainer);
                if (type == Type.CONTAINER) {
                    for (AdvObject obj : gui.getGame().getCurrentRoom().getObjects()) {
                        if (obj instanceof AdvObjectContainer) {
                            ((AdvObjectContainer) obj).add(o);
                        }
                    }
                } else {
                    for (AdvNPC np : gui.getGame().getCurrentRoom().getNPCs()) {
                        if (np.equals(npc)) {
                            np.addInventory(o);
                            break;
                        }
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(ContainerObjectGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleziona prima un oggetto dall'inventario!", "Errore selezione oggetto", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void listInventarioValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listInventarioValueChanged
        if (!evt.getValueIsAdjusting()) {
            DefaultListModel model;
            model = (DefaultListModel) listInventario.getModel();
            if (!model.isEmpty()) {
                if (listInventario.getSelectedIndex() != -1) {
                    AdvObject o;
                    o = (AdvObject) model.getElementAt(listInventario.getSelectedIndex());
                    jTextPane1.setText(o.getDescription());
                    listContenitore.clearSelection();
                }
            }
        }
    }//GEN-LAST:event_listInventarioValueChanged

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContainerObjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContainerObjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContainerObjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContainerObjectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ContainerObjectGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JList<String> listContenitore;
    private javax.swing.JList<String> listInventario;
    // End of variables declaration//GEN-END:variables
}
